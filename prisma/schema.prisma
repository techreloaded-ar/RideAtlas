// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(Explorer)
  bio           String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  trips         Trip[]

  @@map("users")
}

enum UserRole {
  Explorer  // Utenti che fruiscono dei viaggi
  Ranger    // Utenti che possono creare e fruire dei viaggi
  Sentinel  // Ranger con poteri amministrativi
}

model EmailVerificationToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@map("email_verification_tokens")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verificationtokens")
}

model Trip {
  id                 String            @id @default(cuid())
  title              String
  summary            String
  destination        String
  duration_days      Int
  duration_nights    Int
  tags               String[]
  theme              String
  characteristics    String[]
  recommended_season RecommendedSeason
  media              Json[]            @default([])
  slug               String            @unique
  status             TripStatus        @default(Bozza)
  created_at         DateTime          @default(now())
  updated_at         DateTime          @updatedAt
  user_id            String
  user               User              @relation(fields: [user_id], references: [id])

  @@map("trips")
}

enum RecommendedSeason {
  Primavera
  Estate
  Autunno
  Inverno
  Tutte
}

enum TripStatus {
  Bozza
  Pronto_per_revisione @map("Pronto per revisione")
  Pubblicato
  Archiviato
}
